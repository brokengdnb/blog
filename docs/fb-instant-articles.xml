<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://brokengdnb.github.io/blog</link>
    <description>
      Just another voice outside of group.
    </description>
    
        
            <item>
                <title>ME (Markdown Editor)</title>
                <link>http://brokengdnb.github.io/blog/project/mye</link>
                <content:encoded>
                    <![CDATA[
                    <blockquote>
  <p>…just another .md editor but just for me!</p>
</blockquote>

<p><a href="https://github.com/brokengdnb/me" title="preview"><img src="https://github.com/brokengdnb/me/blob/master/about.png?raw=true" alt="preview" title="preview" /></a></p>

<ul>
  <li>WHY? Because I cannot find any Markdown Editor in “darkmode” but show me that results normaly like the original page (Git). Live preview with double scroll, all needed buttons like WORD or textEdit. Editor who remember (undo) and all those things… which I don’t and who will make it done… for me. So that’s ME.</li>
  <li>Forked from <a href="https://pandao.github.io/editor.md/en.html" title="editor.md (Live preview)">editor.md (Live preview)</a> and bundled with Electron to act like off-line app… on my Mac. Just an idea but it works very well on daily use.</li>
</ul>

<hr />

<ul>
  <li><a href="#demo">Demo</a></li>
  <li><a href="#downloads">Downloads</a></li>
  <li><a href="#compilation">Compilation</a></li>
  <li><a href="#features">Features</a></li>
  <li><a href="#documentation">Documentation</a></li>
  <li><a href="#support">Support</a></li>
  <li><a href="#errors">Errors</a></li>
  <li><a href="#license">License</a></li>
</ul>

<h2 id="demo">Demo</h2>

<p><a href="https://github.com/brokengdnb/me" title="demo"><img src="https://github.com/brokengdnb/me/blob/master/demo.gif?raw=true" alt="demo" title="demo" /></a></p>

<h2 id="downloads">Downloads</h2>

<p><a href="https://github.com/brokengdnb/me/releases" title="apple-app"><img src="https://github.com/brokengdnb/me/blob/master/appstore.png?raw=true" alt="apple-app" title="apple-app" /></a></p>

<ul>
  <li><a href="https://github.com/brokengdnb/me/releases/tag/v1.1">ME-1.1.0.dmg (~70MB) ===&gt; App (~172MB)</a></li>
</ul>

<blockquote>
  <p>MD5</p>
  <ul>
    <li>abcd9e60072945b7b9aaed886d9638e8</li>
  </ul>
</blockquote>

<h2 id="compilation">Compilation</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/brokengdnb/me <span class="o">&amp;&amp;</span> <span class="nb">cd </span>me/
npm <span class="nb">install
</span>npm run start
</code></pre></div></div>
<blockquote>
  <p>simple as that…</p>
</blockquote>

<h2 id="features">Features</h2>

<ul>
  <li>Dark theme for longer and comfortable time</li>
  <li>Fullscreen Do-Not-Disturb style</li>
  <li>App cannot be closed, quited or linked into another page =&gt; safety feature for accidentally quiting app. For quit just kill that run command or force kill by alt.</li>
  <li>Support Standard Markdown / CommonMark and GFM (GitHub Flavored Markdown)</li>
  <li>Full-featured: Real-time Preview, Image (cross-domain), Preformatted text/Code blocks/Tables insert, Code fold, Search replace, Themes, Multi-languages, L18n, HTML entities, Code syntax highlighting…</li>
  <li>Markdown Extras : Support ToC (Table of Contents), Task lists, @Links…</li>
  <li>Compatible with all major systems</li>
  <li>Support identification, interpretation, fliter of the HTML tags</li>
  <li>Support TeX (LaTeX expressions, Based on KaTeX), Flowchart and Sequence Diagram of Markdown extended syntax</li>
</ul>

<h2 id="documentation">Documentation</h2>

<p><a href="http://editor.md.ipandao.com/examples/index.html" title="Follow the original project page.">Follow the original project page.</a></p>

<h2 id="support">Support</h2>

<ul>
  <li><strong>OS X (tasted on 10.14.6)</strong></li>
  <li>Linux</li>
  <li><del>Windows</del>  =&gt; rcedit.exe failed with exit code null <em>(So I don’t have one and I will <strong>NOT</strong> support this platform. Call Microsoft service in India or your local IT “experts” because I’ll not do that)</em></li>
</ul>

<h2 id="errors">Errors</h2>

<blockquote>
  <p>Packaging app for platform win32 x64 using electron v8.0.3
Could not find “wine64” on your system.</p>
</blockquote>

<h3 id="plan-a">PLAN A:</h3>

<p><a href="https://apple.stackexchange.com/a/376427" title="Follow white rabbit, good luck!">Follow white rabbit, good luck!</a></p>

<h3 id="plan-b">PLAN B:</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew cask <span class="nb">install </span>wine-stable
<span class="c"># autoinstall</span>
winecfg
</code></pre></div></div>

<p>That will solve the problem of creating App for Microsoft Windows but still that .exe didn’t wokred out nether. After two days of closed code and useless logs I gave on Mincosoft = NO windows.</p>

<p>BUT!!! If you are Mac or Linux user = NO problem.</p>

<h2 id="license">License</h2>

<p>The MIT License.</p>

<p>Copyright (c) 2020 BrokenG</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/project/mye</guid>
                <description>
                    
                    ...just another .md editor but you know, just for me!
                    
                </description>
                <pubDate>Tue, 17 Mar 2020 00:00:00 +0100</pubDate>
                <author>BrokenG</author>
            </item>
        
    
        
            <item>
                <title>AVA (TV &amp; Control)</title>
                <link>http://brokengdnb.github.io/blog/project/ava-tv</link>
                <content:encoded>
                    <![CDATA[
                    <blockquote>
  <p>Since I got working REST-API server and DJ program as well. I wanted to control video effects on projector behind me or any PC/TV connected to local network on a go so here we go…</p>
</blockquote>

<hr />

<ul>
  <li><a href="#demo">Demo</a></li>
  <li><a href="#downloads">Downloads</a></li>
  <li><a href="#compilation">Compilation</a></li>
  <li><a href="#index">Index</a></li>
  <li><a href="#license">License</a></li>
</ul>

<h2 id="demo">Demo</h2>

<p><a href="https://github.com/brokengdnb/me" title="demo"><img src="https://github.com/brokengdnb/ava-tv/blob/master/demo.gif?raw=true" alt="demo" title="demo" /></a></p>

<h2 id="downloads">Downloads</h2>

<ul>
  <li><a href="https://github.com/brokengdnb/ava-tv/releases/tag/v1">AVA-TV-1.0.zip (~70MB)</a></li>
</ul>

<blockquote>
  <p>MD5</p>
  <ul>
    <li>…</li>
  </ul>
</blockquote>

<h2 id="compilation">Compilation</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/brokengdnb/ava-tv <span class="o">&amp;&amp;</span> <span class="nb">cd </span>ava-tv/
npm <span class="nb">install
</span>bower <span class="nb">install
</span>npm run start
</code></pre></div></div>
<blockquote>
  <p>simple as that…</p>
</blockquote>

<h2 id="index">Index</h2>

<pre><code class="language-jade">
</code></pre>

<p>As you can see in a “body” tag I’m using just one element and that render whole aplication in one page, then it depands and also the app will request only what is needed at that request. Then all requests are split between front &amp; back end.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<h2 id="support">Support</h2>

<ul>
  <li><strong>OS X (tasted on 10.14.6)</strong></li>
  <li>Linux</li>
  <li><del>Windows</del>  =&gt; <em>(I don’t have one and I will <strong>NOT</strong> support this platform. Call Microsoft service in India or your local IT “experts”</em></li>
</ul>

<h2 id="license">License</h2>

<p>The MIT License.</p>

<p>Copyright (c) 2020 BrokenG</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/project/ava-tv</guid>
                <description>
                    
                    ...Audio &amp; Video Administration (Stream)
                    
                </description>
                <pubDate>Tue, 30 Jan 2018 00:00:00 +0100</pubDate>
                <author>BrokenG</author>
            </item>
        
    
        
            <item>
                <title>EMI</title>
                <link>http://brokengdnb.github.io/blog/project/emi</link>
                <content:encoded>
                    <![CDATA[
                    <blockquote>
  <p>Never ever lost the passion for acomplishing your dreams, never ever… no matter of what? … omg money? fuck the money… fight for your dreams!</p>
</blockquote>

<p>So the idea was to create a special cusom high level mappings as well as dual-bind responsible skin to adapt on a event on a go, but the point is… limited number of a buttons, so it’s like layer over the layer… over the another one, and the other one based on position in that mixing process. Solution is portable to “any” MIDI or HID device, it just works. In this case Behringer CMD series… and yes, you can separate them and yes each of them have their own layers and yes it works one by one but together…. omg, breaking the rules!</p>

<ul>
  <li><a href="#midi">MIDI</a></li>
  <li><a href="#screens">Screens</a></li>
  <li><a href="#code">Code</a></li>
  <li><a href="#future">Future</a></li>
  <li><a href="#documentation">Documentation</a></li>
  <li><a href="#license">License</a></li>
</ul>

<h2 id="midi">MIDI</h2>

<p><a href="https://github.com/brokengdnb/emi/blob/master/02.jpg?raw=true" title="preview"><img src="https://github.com/brokengdnb/emi/blob/master/02.jpg?raw=true" alt="preview" title="preview" /></a></p>

<h2 id="screens">Screens</h2>

<p><a href="https://github.com/brokengdnb/emi/blob/master/01.png?raw=true" title="preview1"><img src="https://github.com/brokengdnb/emi/blob/master/01.png?raw=true" alt="preview1" title="preview1" /></a></p>

<p><a href="https://github.com/brokengdnb/emi/blob/master/05.png?raw=true" title="preview3"><img src="https://github.com/brokengdnb/emi/blob/master/05.png?raw=true" alt="preview3" title="preview3" /></a></p>

<p><a href="https://github.com/brokengdnb/emi/blob/master/03.png?raw=true" title="preview2"><img src="https://github.com/brokengdnb/emi/blob/master/03.png?raw=true" alt="preview2" title="preview2" /></a></p>

<h2 id="code">Code</h2>

<p>The core is written in C++ by open source comunity Mixxx and I didn’t touched that core, I took care about skin, mappings and comunication between controller, screen and audio. The magic script is written in pure Javasript ES5 with some deep dark energy and the best part is like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// e = encoder, b = button... c = cue??? no, what only 4 deck? common!</span>
<span class="kd">function</span> <span class="nx">deckApi</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">cc</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">e1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e5</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e6</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e7</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">e8</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pitch</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b1</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">b2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b5</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b6</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b7</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b8</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lock</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">deck</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">scratch</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">wheel</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">sync</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">tap</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">cue</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">playPause</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">backward</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">forward</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">minus</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">plus</span><span class="dl">'</span><span class="p">];</span>

    <span class="kd">var</span> <span class="nx">rings</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CC</span><span class="p">.</span><span class="nx">E1</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E2</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E3</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E4</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E5</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E6</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E7</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">E8</span><span class="p">];</span>

    <span class="kd">var</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CC</span><span class="p">.</span><span class="nx">B1</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B2</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B3</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B4</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B5</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B6</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B7</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">B8</span><span class="p">,</span>
        <span class="nx">CC</span><span class="p">.</span><span class="nx">LOAD</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">LOCK</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">SCRATCH</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">SYNC</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">TAP</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">CUE</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">PLAY_PAUSE</span><span class="p">,</span>
        <span class="nx">CC</span><span class="p">.</span><span class="nx">BACKWARD</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">FORWARD</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">MINUS</span><span class="p">,</span> <span class="nx">CC</span><span class="p">.</span><span class="nx">PLUS</span><span class="p">];</span>

    <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">deck</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">deck</span><span class="p">[</span><span class="nx">cc</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">controlApi</span><span class="p">();</span>
    <span class="nx">deck</span><span class="p">.</span><span class="nx">pitch</span><span class="p">.</span><span class="nx">led</span> <span class="o">=</span> <span class="nx">pitchLed</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">rings</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
      <span class="nx">deck</span><span class="p">[</span><span class="nx">CC_NAME</span><span class="p">[</span><span class="nx">rings</span><span class="p">[</span><span class="nx">i</span><span class="p">]]].</span><span class="nx">led</span> <span class="o">=</span> <span class="nx">encoderLedApi</span><span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">rings</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>

    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buttons</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
      <span class="nx">deck</span><span class="p">[</span><span class="nx">CC_NAME</span><span class="p">[</span><span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">]]].</span><span class="nx">led</span> <span class="o">=</span> <span class="nx">buttonLedApi</span><span class="p">(</span><span class="nx">channel</span><span class="p">,</span> <span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>

    <span class="k">return</span> <span class="nx">deck</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<h2 id="future">Future</h2>

<p>Get some single-board mini PC with LCD and create complete custom and standalone player powered by 5V power bank.</p>

<p><a href="https://github.com/brokengdnb/emi/blob/master/board.jpg?raw=true" title="board"><img src="https://github.com/brokengdnb/emi/blob/master/board.jpg?raw=true" alt="board" title="board" /></a></p>

<p><a href="https://github.com/brokengdnb/emi/blob/master/lcd.jpg?raw=true" title="lcd"><img src="https://github.com/brokengdnb/emi/blob/master/lcd.jpg?raw=true" alt="lcd" title="lcd" /></a></p>

<h2 id="documentation">Documentation</h2>

<ul>
  <li><a href="http://https://mixxx.org/wiki/doku.php/faq" title="FAQ">FAQ</a></li>
  <li><a href="https://www.mixxx.org/wiki/doku.phphttp://" title="Wiki">Wiki</a></li>
  <li><a href="https://mixxx.org/wiki/doku.php/creating_skins" title="Skins">Skins</a></li>
  <li><a href="https://github.com/brokengdnb/emi/blob/master/Mixxx-Manual.pdf" title="Manual">Manual</a></li>
  <li><a href="https://mixxx.org/wiki/doku.php/mixxxcontrols" title="Controls">Controls</a></li>
  <li><a href="https://mixxx.org/wiki/doku.php/midi_scripting" title="Scripting">Scripting</a></li>
  <li><a href="https://mixxx.org/wiki/doku.php/hardware_compatibility" title="HW Compatibility">HW Compatibility</a></li>
</ul>

<h2 id="license">License</h2>

<p>See the LICENSE file.</p>

<p>BrokenG (2020)</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/project/emi</guid>
                <description>
                    
                    ...Elegant Mixing Interface (custom DJ app)
                    
                </description>
                <pubDate>Wed, 30 Nov 2016 00:00:00 +0100</pubDate>
                <author>BrokenG</author>
            </item>
        
    
        
            <item>
                <title>AVA (Data)</title>
                <link>http://brokengdnb.github.io/blog/project/ava-data</link>
                <content:encoded>
                    <![CDATA[
                    <blockquote>
  <p>…ok so let’s create a decent REST API database server, with pre &amp; post custom data manipulation, suited up in Material Design (UI) and all of that render in 2D map to visualise songs in a mix &amp; playlists, why? because my memory does not work so I create one…</p>
</blockquote>

<blockquote>
  <p>As a DJ as well as VDJ in one… 3,2,1 and here… we… go…</p>
</blockquote>

<hr />

<ul>
  <li><a href="#demo">Demo</a></li>
  <li><a href="#code">Code</a></li>
  <li><a href="#run">Run</a></li>
  <li><a href="#index">Index</a></li>
  <li><a href="#idea">Idea</a></li>
  <li><a href="#todo">TODO</a></li>
  <li><a href="#support">Support</a></li>
  <li><a href="#license">License</a></li>
</ul>

<h2 id="demo">Demo</h2>

<h2 id="code">Code</h2>

<ul>
  <li><a href="https://github.com/brokengdnb/ava-data/releases/tag/v1">AVA-DATA-1.0.zip (~70MB)</a></li>
</ul>

<blockquote>
  <p>MD5</p>
  <ul>
    <li>…</li>
  </ul>
</blockquote>

<h2 id="run">Run</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/brokengdnb/ava-data <span class="o">&amp;&amp;</span> <span class="nb">cd </span>ava-data/
npm <span class="nb">install
</span>bower <span class="nb">install
</span>npm run start
</code></pre></div></div>
<blockquote>
  <p>woala just like that… and is on <a href="http://localhost:3000/" title="http://localhost:3000/">http://localhost:3000/</a></p>
</blockquote>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/home.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/home.png?raw=true" alt="MVC" title="preview" /></a></p>

<h2 id="index">Index</h2>

<p>…so simple and so open for more complexity, plugins, pages and more:</p>

<pre><code class="language-jade">mixin links(names)
    each name in names
        link(rel="stylesheet", type="text/css", href=name)
mixin scripts(names)
    each name in names
        script(type="text/javascript", src=name)
mixin scriptsBowerAngular(names)
    each name in names
        script(type="text/javascript", src="/bower_components/"+name+"/"+name+".min.js")
html(lang="en")
    head
        title=appName
        meta(name="mobile-web-app-capable" content="yes")
        meta(name="viewport" content="width=device-width, initial-scale=1")
        meta(name="theme-color" content="#000")

        +links([
            "/bower_components/angular-material/angular-material.min.css",
            "/styles/main.css",
            "/styles/croppie.css",
            "/styles/vis.css"
        ])

        +scriptsBowerAngular([
            "angular",
            "angular-animate",
            "angular-aria",
            "angular-material",
            "angular-messages",
            "angular-resource",
            "angular-route",
        ])

        +scripts([
            "/bower_components/angular-youtube-api-factory/dist/angular-youtube-api-factory.min.js",
            "/scripts/WSAvcPlayer.js",
            "/scripts/ng-droplet.min.js",
            "/scripts/progressbar.min.js",
            "/scripts/NodePlayer.js",
            "/scripts/croppie.min.js",
            "/scripts/angular-croppie.js",
            "/scripts/socket.io.slim.js",
            "/scripts/ua-parser.min.js",
            "/scripts/jquery.min.js",
            "/scripts/vis.js",
            "/scripts/app.js",
            "/scripts/index/component.js",
            "/scripts/search/component.js",
            "/scripts/saveAudio/component.js",
            "/scripts/saveVideo/component.js",
            "/scripts/local/component.js",
            "/scripts/move/component.js",
            "/scripts/home/component.js",
            "/scripts/movie/component.js",
            "/scripts/songs/component.js",
            "/scripts/effects/component.js",
            "/scripts/csv/component.js",
            "/scripts/playlists/component.js"
        ])
    body(ng-app="ngApp")
        div(ng-view)

</code></pre>

<p>As you can see in a “body” tag I’m using just one element and that render whole aplication in one page, then it depands and all requests are split between front end getting data &amp; back end doing some extra work:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// definition of front-end routers:</span>
<span class="nx">$routeProvider</span><span class="p">.</span>
<span class="nx">when</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
	<span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;home&gt;&lt;/home&gt;</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">activetab</span><span class="p">:</span> <span class="dl">'</span><span class="s1">home</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">activename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Home</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">reloadOnSearch</span> <span class="p">:</span> <span class="kc">false</span>
<span class="p">}).</span>
<span class="nx">when</span><span class="p">(</span><span class="dl">'</span><span class="s1">/search</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
	<span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;search&gt;&lt;/search&gt;</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">activetab</span><span class="p">:</span> <span class="dl">'</span><span class="s1">search</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">activename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Search</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">reloadOnSearch</span> <span class="p">:</span> <span class="kc">false</span>
<span class="p">}).</span>
<span class="nx">when</span><span class="p">(</span><span class="dl">'</span><span class="s1">/index</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
	<span class="c1">// etc... and then back-end API factory</span>

<span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="dl">'</span><span class="s1">Songs</span><span class="dl">'</span><span class="p">,</span>
	<span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/songs/:id</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@_id</span><span class="dl">'</span><span class="p">},</span> <span class="p">{</span>
			<span class="dl">'</span><span class="s1">query</span><span class="dl">'</span><span class="p">:</span>  <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="na">isArray</span><span class="p">:</span><span class="kc">true</span><span class="p">},</span>
			<span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">:</span>    <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">},</span>
			<span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">},</span>
			<span class="dl">'</span><span class="s1">save</span><span class="dl">'</span><span class="p">:</span>   <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">},</span>
			<span class="dl">'</span><span class="s1">remove</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">},</span>
			<span class="dl">'</span><span class="s1">delete</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span><span class="na">method</span><span class="p">:</span><span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">}</span>
		<span class="p">});</span>
	<span class="p">}</span>
<span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="dl">'</span><span class="s1">Effects</span><span class="dl">'</span><span class="p">,</span>
<span class="c1">// etc...</span>
</code></pre></div></div>
<p>I tried to keep default model MVC and rendering custom templates on a go as well.</p>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/mvc.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/mvc.png?raw=true" alt="MVC" title="preview" /></a></p>

<p>as well as REST-API communications on server split on seperate models, controlers and views, you can see all details on  <a href="http://localhost:3000/api-docs/" title="http://localhost:3000/api-docs/">http://localhost:3000/api-docs/</a> using Swagger UI</p>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/api.png" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/api.png?raw=true" alt="api" title="preview" /></a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/note.controller.js</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>

    <span class="c1">// Create a new Note</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/notes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">create</span><span class="p">);</span>

    <span class="c1">// Retrieve all Notes</span>
    <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/notes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">findAll</span><span class="p">);</span>

    <span class="c1">// Retrieve a single Note with noteId</span>
    <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/notes/:noteId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">findOne</span><span class="p">);</span>

    <span class="c1">// Update a Note with noteId</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/notes/:noteId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">update</span><span class="p">);</span>

    <span class="c1">// Delete a Note with noteId</span>
    <span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/notes/:noteId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">notes</span><span class="p">.</span><span class="k">delete</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="idea">Idea</h2>

<blockquote>
  <p>The idea started in summer 2013, knowlage, technology and libraries comes by 2018 and all together finished by 2020 but it’s still growing… evolving.</p>
</blockquote>

<p>So the idea is that I have 3 main elements that I would like to mix:</p>

<ul>
  <li>music <a href="https://github.com/brokengdnb/emi" title="(project EMI)">(project EMI)</a></li>
</ul>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/emi.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/emi.png?raw=true" alt="MVC" title="preview" /></a></p>

<ul>
  <li>movies</li>
</ul>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/movies.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/movies.png?raw=true" alt="MVC" title="preview" /></a></p>

<ul>
  <li>video effects</li>
</ul>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/effects.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/effects.png?raw=true" alt="MVC" title="preview" /></a></p>

<h2 id="that-can-be-imported-by-3-different-ways">That can be imported by 3 different ways:</h2>
<ul>
  <li>online (YouTube, Soundcloud, etc.)</li>
</ul>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/youtube.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/youtube.png?raw=true" alt="MVC" title="preview" /></a></p>

<ul>
  <li>offline (local)
    <ul>
      <li>move</li>
      <li>convert</li>
    </ul>
  </li>
</ul>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/local.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/local.png?raw=true" alt="MVC" title="preview" /></a></p>

<p>Online is simply text to find API for getting YouTube (limit 1000 requests/day) or any other kind of media (Audio/Video) from anywhere. Or direct Offline internal import. That require specific format .mp4 with settings and parameters for web based seamless playing on any device (iOS, PC, Android, TV) so If I already have that file ready from previous I can just move it or I can convert audio or video or both of ANY kind of file (.avi .flv .mkv. or whatever) to global format for any device… even my old-school PSP :) or iPhone 5-11</p>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/csv.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/csv.png?raw=true" alt="MVC" title="preview" /></a></p>

<p>That’s individual import for each of element, once that is solved I started creating playlists. In project EMI once I get the right songs with the right effects in right order, I’m exporting CSV file of those “files/songs” and that will get imported as well with direct connections between each other.</p>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/playlist.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/playlist.png?raw=true" alt="MVC" title="preview" /></a></p>

<p>Squere is video effect connected to specific song (dot), gray ‘new’ dots mean exit or income from playlist to another one and red dots means that song does not have image cover, by double click on it you can open modal and drag &amp; drop a new cover image as well as import or edit original ID3 tags.</p>

<p><a href="https://github.com/brokengdnb/ava-data/demo-img/edit.png?raw=true" title="preview"><img src="https://github.com/brokengdnb/ava-data/blob/master/demo-img/edit.png?raw=true" alt="MVC" title="preview" /></a></p>

<h3 id="todo">Todo</h3>

<ul>
  <li>connect automatic searcher for cover images based on title, some open source API for official album &amp; single covers?</li>
  <li>fix a multiple delete function for movies &amp; effects, so far it’s just one by one but solution is already on songs, just copy/paste that solution… but I’m lazy xD</li>
  <li>add multiple online responds for just one request</li>
  <li>dynamic change API key for youtube after reaching 1000 requests/day</li>
  <li>by Drag &amp; Drop get &amp; map external storage for files</li>
  <li>copy files into that storage as a backup and write ID3 tags into original file as well</li>
  <li>export pure JSON &amp; images for offline sever-less PWA</li>
  <li>fix Safari bugs, but in this case I’m using Chrome and that’s bullet proof</li>
</ul>

<h2 id="support">Support</h2>

<ul>
  <li><strong>OS X (tested on Mojave 10.14.6)</strong></li>
  <li>Linux</li>
  <li><del>Windows</del>  =&gt; <em>(I don’t have one and I will <strong>NOT</strong> support this platform, never ever)”</em></li>
</ul>

<h2 id="license">License</h2>

<p>The MIT License.</p>

<p>Copyright (c) 2020 BrokenG</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/project/ava-data</guid>
                <description>
                    
                    ...Audio &amp; Video Administration (Database)
                    
                </description>
                <pubDate>Fri, 30 Aug 2013 00:00:00 +0200</pubDate>
                <author>BrokenG</author>
            </item>
        
    
        
            <item>
                <title>Links</title>
                <link>http://brokengdnb.github.io/blog/urls</link>
                <content:encoded>
                    <![CDATA[
                    <blockquote>
  <p>Never memorize something that you can look up.</p>

  <p>― Albert Einstein</p>
</blockquote>

<ul>
  <li><a href="#3d">3D</a></li>
  <li><a href="#blogs">Blogs</a></li>
  <li><a href="#forms">Forms</a></li>
  <li><a href="#podcasts">Podcasts</a></li>
  <li><a href="#radios">Radios</a></li>
  <li><a href="#resume">Resume</a></li>
  <li><a href="#external">External</a></li>
</ul>

<hr />

<h2 id="3d">3D</h2>

<ul>
  <li><a href="https://alicevision.org">Alicevision</a></li>
</ul>

<h2 id="blogs">Blogs</h2>

<ul>
  <li><a href="https://www.bbc.co.uk/rd/blog" title="BBC Research and Development">BBC Research and Development</a></li>
  <li><a href="http://https://netflixtechblog.com/" title="Neflix developer blog">Neflix dev blog</a></li>
  <li><a href="https://youtube-eng.googleblog.com/" title="Youtube dev blog">Youtube dev blog</a></li>
</ul>

<h2 id="browser">Browser</h2>

<ul>
  <li><a href="https://www.powermapper.com/products/sortsite/checks/browser-compatibility">Website browser Compatibility</a></li>
</ul>

<h2 id="forms">Forms</h2>
<ul>
  <li><a href="https://formspree.io/" title="Formspree">Formspree (front-end)</a></li>
</ul>

<h2 id="podcasts">Podcasts</h2>

<ul>
  <li><a href="https://simplecast.com/">Simplecast</a></li>
</ul>

<h2 id="radios">Radios</h2>

<ul>
  <li><a href="http://icecast8.play.cz/color128.mp3" title="Color Music Radio (Czech Republic)">Color Music Radio (Czech Republic)</a></li>
  <li><a href="http://trace.dnbradio.com:8000/dnbradio_main.mp3" title="Drum &amp; Bass (England)">Drum &amp; Bass (England)</a></li>
</ul>

<h2 id="resume">Resume</h2>

<ul>
  <li><a href="https://novoresume.com/" title="Novorésumé">Novorésumé</a></li>
</ul>

<h3 id="external">External</h3>

<ul>
  <li><a href="https://github.com/ebu/awesome-broadcasting" title="Awesome Broadcasting (git)">Awesome Broadcasting (git)</a></li>
  <li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted" title="Awesome-Selfhosted">Awesome Selfhosted (git)</a></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/urls</guid>
                <description>
                    
                    ...collection of all interesting sites &amp; projects
                    
                </description>
                <pubDate>Sun, 30 Jan 2011 00:00:00 +0100</pubDate>
                <author>BrokenG</author>
            </item>
        
    
  </channel>
</rss>
